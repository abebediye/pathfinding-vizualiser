{"version":3,"sources":["contexts/NodesContext.tsx","components/Canvas/draw.tsx","components/Canvas/index.tsx","styles/StyledHeader.tsx","components/Header/Controls.tsx","components/Header/Preferanes.tsx","components/Header/index.tsx","styles/StyledApp.tsx","App.tsx","reportWebVitals.ts","styles/GlobalStyle.tsx","index.tsx"],"names":["NodesContext","createContext","nodes","setNodes","undefined","canvas","context","NODE_RADIUS","draw","canvasRef","current","width","window","innerWidth","height","innerHeight","style","getContext","clearRect","map","node","drawConnectingLines","drawNode","drawDotOnRadius","getPointOnRadius","center","point","angle","Math","atan","y","x","cos","PI","sin","connectedNodes","connectedNode","node_pointOnRadius","position","connectedNode_pointOnRadius","beginPath","strokeStyle","moveTo","lineTo","stroke","closePath","drawPoint","labled","arc","fillStyle","fill","drawPointLabel","fillText","floor","isActive","isStartNode","lineWidth","font","toUpperCase","label","NodeCanvas","useRef","useState","isMovingNode","setIsMovingNode","activeNodes","setActiveNodes","useContext","useEffect","getActiveNodes","shiftKeyPressed","includes","createNewNode","offsetX","offsetY","newNode","length","isEndNode","getExsistingNode","find","sqrt","pow","onMouseDown","nativeEvent","ctrlKey","filter","shiftKey","onMouseUp","console","log","onMouseMove","ref","StyledHeader","styled","header","StyledLogo","div","StyledPreferances","StyledControls","Controls","onClick","Preferances","Header","Typography","variant","component","StyledApp","App","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8aafe469.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { NodesState } from \"../interfaces\";\r\n\r\nexport const NodesContext = createContext<NodesState>({\r\n    nodes: [],\r\n    setNodes: undefined,\r\n});\r\n","import { RefObject } from \"react\";\r\nimport { Coordinates, Node } from \"../../interfaces\";\r\n\r\nlet canvas: HTMLCanvasElement | null = null;\r\nlet context: CanvasRenderingContext2D | null = null;\r\nconst NODE_RADIUS = 100;\r\nconst LABLE_NODES = false;\r\n\r\n// const nodes: Array<Node> = useContext(NodesContext);\r\nexport const draw = {\r\n    setCanvas: (canvasRef: RefObject<HTMLCanvasElement>) => {\r\n        if (!canvasRef.current) return;\r\n        canvas = canvasRef.current;\r\n        canvas.width = window.innerWidth * 2;\r\n        canvas.height = window.innerHeight * 2;\r\n        canvas.style.width = `${window.innerWidth}px`;\r\n        canvas.style.height = `${window.innerHeight}px`;\r\n        context = canvas.getContext(\"2d\");\r\n    },\r\n    nodes: (nodes: Array<Node>) => {\r\n        if (!context || !canvas) return;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        nodes.map((node) => drawConnectingLines(node));\r\n        nodes.map((node) => drawNode(node));\r\n        nodes.map((node) => drawDotOnRadius(node));\r\n    },\r\n};\r\n\r\nconst getPointOnRadius = (\r\n    center: Coordinates,\r\n    point: Coordinates\r\n): Coordinates => {\r\n    const angle = Math.atan((point.y - center.y) / (point.x - center.x));\r\n\r\n    return {\r\n        x:\r\n            center.x +\r\n            Math.cos(angle + (point.x - center.x < 0 ? Math.PI : 0)) *\r\n                NODE_RADIUS,\r\n        y:\r\n            center.y +\r\n            Math.sin(angle + (point.x - center.x < 0 ? Math.PI : 0)) *\r\n                NODE_RADIUS,\r\n    };\r\n};\r\n\r\nconst drawConnectingLines = (node: Node) => {\r\n    node.connectedNodes.map((connectedNode) => {\r\n        if (!context || !connectedNode) return null;\r\n        const node_pointOnRadius = getPointOnRadius(\r\n            node.position,\r\n            connectedNode.position\r\n        );\r\n\r\n        const connectedNode_pointOnRadius = getPointOnRadius(\r\n            connectedNode.position,\r\n            node.position\r\n        );\r\n\r\n        context.beginPath();\r\n        context.strokeStyle = \"black\";\r\n\r\n        context.moveTo(node_pointOnRadius.x, node_pointOnRadius.y);\r\n\r\n        context.lineTo(\r\n            connectedNode_pointOnRadius.x,\r\n            connectedNode_pointOnRadius.y\r\n        );\r\n        context.stroke();\r\n        context.closePath();\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nconst drawDotOnRadius = (node: Node) => {\r\n    node.connectedNodes.map((connectedNode) => {\r\n        if (!context || !connectedNode) return null;\r\n        const node_pointOnRadius = getPointOnRadius(\r\n            node.position,\r\n            connectedNode.position\r\n        );\r\n        const connectedNode_pointOnRadius = getPointOnRadius(\r\n            connectedNode.position,\r\n            node.position\r\n        );\r\n\r\n        drawPoint(connectedNode_pointOnRadius, LABLE_NODES);\r\n        drawPoint(node_pointOnRadius, LABLE_NODES);\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nconst drawPoint = (point: Coordinates, labled: boolean = false) => {\r\n    if (!context) return;\r\n    context.beginPath();\r\n    context.arc(point.x, point.y, 10, 0, 2 * Math.PI, true);\r\n    context.fillStyle = \"purple\";\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    if (labled) {\r\n        drawPointLabel(point);\r\n    }\r\n};\r\n\r\nconst drawPointLabel = (point: Coordinates) => {\r\n    if (!context) return;\r\n    context.fillText(\r\n        `(${Math.floor(point.x)},${Math.floor(point.y)})`,\r\n        point.x + 20,\r\n        point.y - 20\r\n    );\r\n};\r\n\r\nconst drawNode = (node: Node) => {\r\n    if (!context) return;\r\n\r\n    context.strokeStyle = node.isActive\r\n        ? \"red\"\r\n        : node.isStartNode\r\n        ? \"green\"\r\n        : \"black\";\r\n    context.lineWidth = 5;\r\n    context.beginPath();\r\n    context.arc(node.position.x, node.position.y, NODE_RADIUS, 0, 2 * Math.PI);\r\n    context.stroke();\r\n\r\n    context.fillStyle = \"white\";\r\n    context.fill();\r\n    context.closePath();\r\n\r\n    context.font = \"32px roboto\";\r\n    context.fillText(\r\n        node.isStartNode ? \"start\".toUpperCase() : node.label,\r\n        node.position.x - 50,\r\n        node.position.y + 10,\r\n        NODE_RADIUS\r\n    );\r\n};\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { NodesContext } from \"../../contexts/NodesContext\";\r\nimport { Coordinates, Node, NodesState } from \"../../interfaces\";\r\nimport { draw } from \"./draw\";\r\n\r\nconst NODE_RADIUS = 100;\r\n\r\nconst NodeCanvas = () => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    // const [nodes, setNodes] = useState<Array<Node>>([]);\r\n    const [isMovingNode, setIsMovingNode] = useState(false);\r\n    const [activeNodes, setActiveNodes] = useState<Array<Node | null>>([]);\r\n\r\n    const { nodes, setNodes } = useContext<NodesState>(NodesContext);\r\n\r\n    useEffect(() => {\r\n        draw.setCanvas(canvasRef);\r\n        draw.nodes(nodes);\r\n        // eslint-disable-next-line\r\n    }, [nodes]);\r\n\r\n    const handleMouseDown = ({\r\n        nativeEvent,\r\n    }: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        const { offsetX, offsetY } = nativeEvent;\r\n\r\n        if (!nativeEvent.ctrlKey) {\r\n            nodes\r\n                .filter((node) => node.isActive)\r\n                .map((node) => (node!.isActive = false));\r\n            setActiveNodes([]);\r\n            return;\r\n        }\r\n\r\n        let node = getExsistingNode({ x: offsetX * 2, y: offsetY * 2 });\r\n\r\n        if (!node) {\r\n            node = createNewNode(offsetX, offsetY);\r\n        }\r\n        setActiveNodes(getActiveNodes(nativeEvent.shiftKey, node));\r\n\r\n        setIsMovingNode(true);\r\n        draw.nodes(nodes);\r\n    };\r\n\r\n    const getActiveNodes = (\r\n        shiftKeyPressed: boolean,\r\n        node: Node\r\n    ): Array<Node | null> => {\r\n        node.isActive = true;\r\n        if (!shiftKeyPressed) {\r\n            activeNodes.map((node) => (node!.isActive = false));\r\n            return [node];\r\n        }\r\n\r\n        if (activeNodes.includes(node)) {\r\n            return [...activeNodes];\r\n        }\r\n\r\n        return [...activeNodes, node];\r\n    };\r\n\r\n    const createNewNode = (offsetX: number, offsetY: number): Node => {\r\n        const newNode: Node = {\r\n            position: { x: offsetX * 2, y: offsetY * 2 },\r\n            isStartNode: nodes.length === 0,\r\n            isActive: false,\r\n            isEndNode: false,\r\n            label: `Node ${nodes.length + 1}`,\r\n            connectedNodes: [...activeNodes],\r\n        };\r\n        // TODO - solve undefined error\r\n        setNodes!([...nodes, newNode]);\r\n        return newNode;\r\n    };\r\n\r\n    const getExsistingNode = (point: Coordinates): Node | undefined => {\r\n        const existingNode = nodes.find(\r\n            (node) =>\r\n                Math.sqrt(\r\n                    Math.pow(point.x - node.position.x, 2) +\r\n                        Math.pow(point.y - node.position.y, 2)\r\n                ) < NODE_RADIUS\r\n        );\r\n\r\n        return existingNode;\r\n    };\r\n\r\n    const handleMouseMove = ({\r\n        nativeEvent,\r\n    }: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        if (!isMovingNode) return;\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        if (!activeNodes) return;\r\n        activeNodes.map((node) => {\r\n            if (!node) return null;\r\n            node.position.x = offsetX * 2;\r\n            node.position.y = offsetY * 2;\r\n\r\n            return null;\r\n        });\r\n\r\n        // position = { x: offsetX * 2, y: offsetY * 2 };\r\n        draw.nodes(nodes);\r\n        console.log(\"activeNodes move\");\r\n        console.log(activeNodes.map((node) => node?.label));\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n        draw.nodes(nodes);\r\n        setIsMovingNode(false);\r\n\r\n        console.log(\"activeNodes up\");\r\n        console.log(activeNodes.map((node) => node?.label));\r\n    };\r\n\r\n   \r\n    return (\r\n        <canvas\r\n            onMouseDown={handleMouseDown}\r\n            onMouseUp={handleMouseUp}\r\n            onMouseMove={handleMouseMove}\r\n            ref={canvasRef}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NodeCanvas;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 1rem;\r\n    background-color: #231728;\r\n    color: #f8f8f7;\r\n    align-items: center;\r\n    justify-content: center;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const StyledLogo = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    text-transform: uppercase;\r\n    flex: 1;\r\n\r\n    padding: 0.5rem;\r\n    border: 1px solid #bb76a5;\r\n    & :first-child {\r\n        margin: 0 1rem;\r\n    }\r\n\r\n    :hover {\r\n        outline: none;\r\n        border-color: #bb76a5;\r\n        box-shadow: 0 0 10px #bb76a5;\r\n    }\r\n`;\r\nexport const StyledPreferances = styled.div`\r\n    flex: 4;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    & > * {\r\n        margin-left: 2rem;\r\n    }\r\n`;\r\n\r\nexport const StyledControls = styled.div`\r\n    flex: 1;\r\n\r\n    display: flex;\r\n    justify-content: flex-start;\r\n\r\n    & > * {\r\n        margin-left: 1rem;\r\n    }\r\n\r\n    & > * :hover {\r\n        color: green;\r\n    }\r\n`;\r\n","import { StyledControls } from \"../../styles/StyledHeader\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport LayersClearIcon from \"@material-ui/icons/LayersClear\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { useContext } from \"react\";\r\nimport { NodesState } from \"../../interfaces\";\r\nimport { NodesContext } from \"../../contexts/NodesContext\";\r\n\r\nconst Controls = () => {\r\n    const { nodes, setNodes } = useContext<NodesState>(NodesContext);\r\n\r\n    const handleDelete = () => {\r\n        setNodes!([]);\r\n    };\r\n    return (\r\n        <StyledControls>\r\n            {`Nodes: ${nodes.length}`}\r\n            <EditIcon />\r\n            <LayersClearIcon onClick={handleDelete} />\r\n            <PlayArrowIcon />\r\n            <StopIcon />\r\n        </StyledControls>\r\n    );\r\n};\r\n\r\nexport default Controls;\r\n","import { StyledPreferances } from '../../styles/StyledHeader'\r\nimport GridOnIcon from '@material-ui/icons/GridOn';\r\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\r\n\r\nconst Preferances = () => <StyledPreferances>\r\n    <GridOnIcon />\r\n    <FitnessCenterIcon />\r\n</StyledPreferances>\r\n\r\nexport default Preferances","import { StyledHeader, StyledLogo } from '../../styles/StyledHeader'\r\nimport AccountTreeOutlined from '@material-ui/icons/AccountTreeOutlined'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Controls from './Controls'\r\nimport Preferances from './Preferanes'\r\n\r\n\r\n\r\nconst Header = () => <StyledHeader>\r\n\r\n    <StyledLogo>\r\n        <AccountTreeOutlined />\r\n        <Typography variant=\"h6\" component=\"h6\"> Pathfinding Vizualiser </Typography>\r\n    </StyledLogo>\r\n\r\n    <Preferances/>\r\n    <Controls />\r\n\r\n</StyledHeader>\r\n\r\nexport default Header","import styled from \"styled-components\";\r\n\r\nexport const StyledApp = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n\r\n    display:flex;\r\n    flex-direction: column;\r\n`;\r\n","import NodeCanvas from \"./components/Canvas\";\r\nimport Header from \"./components/Header\";\r\n\r\nimport { StyledApp } from \"./styles/StyledApp\";\r\nimport { NodesContext } from \"./contexts/NodesContext\";\r\nimport { useState } from \"react\";\r\nimport { Node } from './interfaces'\r\n\r\nconst App = () => {\r\n    const [nodes, setNodes] = useState<Array<Node>>([]);\r\n\r\n    return (\r\n        <StyledApp>\r\n            <NodesContext.Provider value={{ nodes, setNodes }}>\r\n                <Header />\r\n                <NodeCanvas />\r\n            </NodesContext.Provider>\r\n        </StyledApp>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    body {\r\n        padding: 0;\r\n        margin: 0 ;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport GlobalStyle from \"./styles/GlobalStyle\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <GlobalStyle />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}